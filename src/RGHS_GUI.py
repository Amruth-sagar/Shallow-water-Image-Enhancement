#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Dec 02, 2021 02:10:19 PM IST  platform: Windows NT

import sys
sys.path.insert(0,'color_correction/')
from PIL import Image, ImageTk
from tkinter.filedialog import askopenfilename
import cv2
import os
import numpy as np
from contrast_correction.contrast_correction import ContrastCorrection
from color_correction import ColorCorrection

#Initialise the method classes
contrast_correction = ContrastCorrection()
color_correction = ColorCorrection()


# =======================================
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import RGHS_GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    RGHS_GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    RGHS_GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def uploadInputImage(self):
        filename = askopenfilename()
        original_img = Image.open(filename).resize((430,350),Image.ANTIALIAS)
        original_img = ImageTk.PhotoImage(original_img)

        # Display the selected input image in GUI
        self.InputImage.configure(image=original_img)
        self.InputImage.image=original_img

        # Process the input image 
        image = cv2.cvtColor(cv2.imread(filename), cv2.COLOR_BGR2RGB)
               
        contrast_corrected_image = contrast_correction.process(image)
        color_corrected_image = color_correction.color_correct(contrast_corrected_image)

        # Converting the color
        contrast_corrected_image = cv2.cvtColor(contrast_corrected_image, cv2.COLOR_RGB2BGR)
        color_corrected_image = cv2.cvtColor(color_corrected_image, cv2.COLOR_RGB2BGR)

        # saving the output files
        cv2.imwrite('./tmp/contrast_corrected_image.png', contrast_corrected_image)
        cv2.imwrite('./tmp/color_corrected_image.png', color_corrected_image)


        contcorr_img = Image.open('./tmp/contrast_corrected_image.png').resize((430,350),Image.ANTIALIAS)
        contcorr_img = ImageTk.PhotoImage(contcorr_img)

        colcorr_img = Image.open('./tmp/color_corrected_image.png').resize((430,350),Image.ANTIALIAS)
        colcorr_img = ImageTk.PhotoImage(colcorr_img)

        # Display the contrast corrected image in GUI
        self.ContrastCorrImage.configure(image=contcorr_img)
        self.ContrastCorrImage.image=contcorr_img        

        # Display the color corrected image in GUI
        self.ColorCorrImage.configure(image=colcorr_img)
        self.ColorCorrImage.image=colcorr_img
        
    def __init__(self, top=None):
        try:
            os.mkdir('./tmp')
        except OSError as error:
            pass
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1536x801+-8+-8")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.28, rely=0.037, height=121, width=664)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Sitka Small} -size 18")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(relief="sunken")
        self.Label1.configure(text='''Shallow-water Image Enhancement Using Relative Global Histogram Stretching Based on Adaptive Parameter Acquisition''')
        self.Label1.configure(wraplength="600")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.117, rely=0.3, height=42, width=193)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Tahoma} -size 16")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Input Image''')

        self.Label2_1 = tk.Label(top)
        self.Label2_1.place(relx=0.404, rely=0.3, height=42, width=273)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Tahoma} -size 16")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''Contrast corrected Image''')

        self.Label2_1_1 = tk.Label(top)
        self.Label2_1_1.place(relx=0.736, rely=0.3, height=41, width=254)
        self.Label2_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_1.configure(activeforeground="black")
        self.Label2_1_1.configure(background="#d9d9d9")
        self.Label2_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1.configure(font="-family {Tahoma} -size 16")
        self.Label2_1_1.configure(foreground="#000000")
        self.Label2_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1.configure(highlightcolor="black")
        self.Label2_1_1.configure(text='''Color corrected Image''')

        self.UploadImage = tk.Button(top)
        self.UploadImage.place(relx=0.13, rely=0.824, height=44, width=127)
        self.UploadImage.configure(activebackground="#ececec")
        self.UploadImage.configure(activeforeground="#000000")
        self.UploadImage.configure(background="#d9d9d9")
        self.UploadImage.configure(borderwidth="5")
        self.UploadImage.configure(disabledforeground="#a3a3a3")
        self.UploadImage.configure(font="-family {Lucida Console} -size 10")
        self.UploadImage.configure(foreground="#000000")
        self.UploadImage.configure(highlightbackground="#d9d9d9")
        self.UploadImage.configure(highlightcolor="black")
        self.UploadImage.configure(padx="2")
        self.UploadImage.configure(pady="2")
        self.UploadImage.configure(text='''Upload Image''')
        self.UploadImage.configure(command=self.uploadInputImage)

        self.InputImage = tk.Label(top)
        self.InputImage.place(relx=0.046, rely=0.362, height=350, width=430)
        self.InputImage.configure(background="#d9d9d9")
        self.InputImage.configure(disabledforeground="#a3a3a3")
        self.InputImage.configure(foreground="#000000")
        self.InputImage.configure(relief="sunken")
        self.InputImage.configure(text='''image''')

        self.ContrastCorrImage = tk.Label(top)
        self.ContrastCorrImage.place(relx=0.358, rely=0.362, height=350
                , width=430)
        self.ContrastCorrImage.configure(background="#d9d9d9")
        self.ContrastCorrImage.configure(disabledforeground="#a3a3a3")
        self.ContrastCorrImage.configure(foreground="#000000")
        self.ContrastCorrImage.configure(relief="sunken")
        self.ContrastCorrImage.configure(text='''image''')

        self.ColorCorrImage = tk.Label(top)
        self.ColorCorrImage.place(relx=0.671, rely=0.362, height=350, width=430)
        self.ColorCorrImage.configure(background="#d9d9d9")
        self.ColorCorrImage.configure(disabledforeground="#a3a3a3")
        self.ColorCorrImage.configure(foreground="#000000")
        self.ColorCorrImage.configure(relief="sunken")
        self.ColorCorrImage.configure(text='''image''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

if __name__ == '__main__':
    vp_start_gui()





